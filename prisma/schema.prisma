// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Add to your schema.prisma
model Contract {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("PENDING") // PENDING, ANALYZED, FAILED
  riskLevel String   @default("UNKNOWN") // HIGH, MEDIUM, LOW, UNKNOWN
  parties   String[]
  analysis  String?  // Stores JSON string of full analysis
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id               String        @id @unique
  name             String?
  email            String        @unique
  stripeCustomerId String?       @unique
  colorScheme      String        @default("theme-orange")
  Subscription     Subscription?
  Notes            Note[]
}

model Subscription {
  stripeSubscriptionId String   @id @unique
  invterval            String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
  userId               String   @unique
}
model ContractAnalysis {
  id             String   @id @default(cuid())
  title          String
  contractText   String   @db.Text
  analysisType   String   @default("full") // full, risks, clauses, compliance
  analysisResult String   @db.Text // JSON string of the analysis result
  riskScore      Int?     @default(0)
  status         String   @default("pending") // pending, processing, completed, failed
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("contract_analyses")
}

model Note {
  id          String @id @default(uuid())
  title       String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}
